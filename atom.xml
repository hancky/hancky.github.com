<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[子曾经曰过]]></title>
  <link href="http://www.sgxiang.com/atom.xml" rel="self"/>
  <link href="http://www.sgxiang.com/"/>
  <updated>2014-05-24T19:58:53+08:00</updated>
  <id>http://www.sgxiang.com/</id>
  <author>
    <name><![CDATA[韩利军]]></name>
    <email><![CDATA[hancky@sina.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[memcpy memmove区别和实现]]></title>
    <link href="http://www.sgxiang.com/blog/2014/05/24/memcpy-memmovequ-bie-he-shi-xian/"/>
    <updated>2014-05-24T17:44:00+08:00</updated>
    <id>http://www.sgxiang.com/blog/2014/05/24/memcpy-memmovequ-bie-he-shi-xian</id>
    <content type="html"><![CDATA[<p>memcpy与memmove的目的都是将N个字节的源内存地址的内容拷贝到目标内存地址中。</p>

<p>但当源内存和目标内存存在重叠时，memcpy会出现错误，而memmove能正确地实施拷贝，但这也增加了一点点开销。</p>

<h4>memmove的处理措施：</h4>

<p>（1）当源内存的首地址等于目标内存的首地址时，不进行任何拷贝</p>

<p>（2）当源内存的首地址大于目标内存的首地址时，实行正向拷贝</p>

<p>（3）当源内存的首地址小于目标内存的首地址时，实行反向拷贝</p>

<h4>memcpy实现</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void* memcpy(void* dest, const void* src, size_t n) 
</span><span class='line'>{
</span><span class='line'>    char*      d = (char*) dest;
</span><span class='line'>    const char*  s = (const char*) src;
</span><span class='line'>    while(n-–) 
</span><span class='line'>       *d++ = *s++;
</span><span class='line'>    return dest;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>memmove实现</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void* memmove(void* dest, const void* src, size_t n)
</span><span class='line'>{
</span><span class='line'>    char*     d  = (char*) dest;
</span><span class='line'>    const char*  s = (const char*) src;
</span><span class='line'>  
</span><span class='line'>    if (s&gt;d) 
</span><span class='line'>    {
</span><span class='line'>         // start at beginning of s
</span><span class='line'>         while (n--)
</span><span class='line'>            *d++ = *s++;
</span><span class='line'>    }
</span><span class='line'>    else if (s&lt;d)
</span><span class='line'>    {
</span><span class='line'>        // start at end of s
</span><span class='line'>        d = d+n-1;
</span><span class='line'>        s = s+n-1;
</span><span class='line'>  
</span><span class='line'>        while (n--)
</span><span class='line'>           *d-- = *s--;
</span><span class='line'>    }
</span><span class='line'>    return dest;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h4>示意图：</h4>

<ol>
<li>内存低端 &lt;&mdash;&mdash;-s&mdash;&mdash;&ndash;> &lt;&mdash;&mdash;-d&mdash;&mdash;&ndash;> 内存高端 start at end of s</li>
<li>内存低端 &lt;&mdash;&mdash;-s&mdash;&lt;==>&mdash;d&mdash;&mdash;&ndash;>      内存高端 start at end of s</li>
<li>内存低端 &lt;&mdash;&mdash;-sd&mdash;&mdash;&ndash;>              内存高端 do nothing</li>
<li>内存低端 &lt;&mdash;&mdash;-d&mdash;&lt;==>&mdash;s&mdash;&mdash;&ndash;>      内存高端 start at beginning of s</li>
<li>内存低端 &lt;&mdash;&mdash;-d&mdash;&mdash;&ndash;> &lt;&mdash;&mdash;-s&mdash;&mdash;&ndash;> 内存高端 start at beginning of s</li>
</ol>


<p>转自<a href="http://www.cnblogs.com/kekec/archive/2011/07/22/2114107.html">http://www.cnblogs.com/kekec/archive/2011/07/22/2114107.html</a></p>
]]></content>
  </entry>
  
</feed>
